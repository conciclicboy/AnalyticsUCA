#    Guardarlo con el nombre b
# 3. Esto es solo para cambiar el formato: se guarda el Data.Frame b
#    en la variable a como una matriz
#    DESCOMENTAR SIGUIENTE LÍNEA
#a<-data.matrix(b)
# 4. Imprimiento las primeras 3 filas:
#    t significa transponer,
#    head(a,3) significa primeras 3 filas de a
#    round(a,2) significa redondear los valores a 2 decimales
#    DESCOMENTAR SIGUIENTES LÍNEAS
#knitr::kable({
#  df <- t(head(round(a,2), 5))
#  colnames(df) <- sprintf("%02d", 1:ncol(df))
#  df
#})
# Chequear donde está el directorio
getwd()
# Leer el archivo tomslee_airbnb_amsterdam
b<-read.csv("./data/tomslee_airbnb_amsterdam_1476_2017-07-22.csv")
#Voy a hacer una copia como una matriz solo para imprimir
#No es necesario hacer esto cuando se trabaja en R, esto solo es
#Porque tenemos un archivo markdown y los data frames se imprimen feo
a<-data.matrix(b)
#Imprimiento las primeras 3 filas: t significa transponer,
#head(a,3) significa primeras 3 filas de a
#round(a,2) significa redondear los valores a 2 decimales
knitr::kable({
df <- t(head(round(a,2), 5))
#df <- t(head(b, 2))
colnames(df) <- sprintf("%02d", 1:ncol(df))
df
})
# 1. Utilice la función "summary" con el dataset "b"
summary(b)
# 1. Elimine las variables que tienen valores NA
#   Simplemente se asigna NULL a la variable que se desea eliminar:
#b$var1 <- NULL
b$country <- NULL
b$borough <- NULL
b$bathrooms <- NULL
b$minstay <- NULL
colnames(b)
# 1. Llame la librería ggplot2
# 2. Cree un objeto con la función ggplot()
#    este debe recibie el DATAFRAME b y la VARIABLE price
#pl <- ggplot(DATAFRAME, aes(x=VARIABLE_A_EXPLORAR))
# 3. Grafique el histograma
#    DESCOMENTAR LA SIGUIENTE LINEA
#pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
library(ggplot2)
pl <- ggplot(b,aes(x=price))
pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
# 1. Filtre los valores mayores o iguales a percentil 1
#    La función quantile(DATO$VAR, p) sirve para determinar
#    el percentil p, de la variable VAR en el dataframe DATOS.
#    DESCOMENTAR LA SIGUIENTE LINEA
#b<- b [b$price>=quantile(b$price,0.01),]
# 2. Filtre los valores menores o iguales a percentil 99
# 3. Grafique nuevamente el histograma de la variable price.
#filtrando data frame entre percentiles 1 y 99 de la variable precio
b<- b [(b$price>=quantile(b$price,0.01)) & (b$price <= quantile(b$price,0.99)),]
#Graficando nuevamente
pl <- ggplot(b,aes(x=price))
pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
# Para no hacernos la vida imposible podemos hacer muchos scatter plot
# utilizando la función visualize de la librería radiant.data
# 1. Llamar la librería radiant.data (instalarla en caso lo necesite)
# 2. Utilizar la función visualize para ver los diagramas de dispersión.
#    COMPLETE EL SIGUIENTE BLOQUE DE CÓDIGO
#visualize(dataset= NOMBRE DEL DATAFRAME,
#          xvar=c("VARIABLES INDEPENDIENTES""),
#          yvar="VARIABLE DEPENDIENTE",
#          type="scatter",
#          custom=FALSE
#)
#fig.height=4.5,
#Para no hacernos la vida imposible podemos hacer muchos scatter plot
#utilizando la función visualize de la librería radiant.data
#library(lubridate)
# INSTALAR RADIANT DATA
library(radiant.data)
visualize(dataset=b,
xvar=c("reviews","overall_satisfaction","accommodates","bedrooms",
"latitude", "longitude"),
yvar="price",
type="scatter",
custom=FALSE
)
pl<-ggplot(data=b,aes(y=price,x=neighborhood))
pl+geom_boxplot(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1))
# 1. Defina el límite inferior de los vecindarios a considerar
#    como un 4% del total de datos en nuestra base (nrow)
#    COMPLETE LA SIGUIENTE LINEA DE CODIGO
#lim_inferior<- #...
# 2. Vamos a graficar el número de elementos por vecindario
#    DESCOMENTE EL BLOQUE DE CODIGO
#pl<-ggplot(data=b,aes(x=neighborhood))
#pl+geom_bar(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1)) +geom_hline(yintercept = lim_inferior)
# límite inferior de los vecindarios a considerar
# Podemos agarrar 1%-2%-3%-4%-5% de elementos
lim_inferior<-nrow(b)*0.04
#conteo_vec
pl<-ggplot(data=b,aes(x=neighborhood))
pl+geom_bar(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1)) +geom_hline(yintercept = lim_inferior)
# 1. Crear una tabla c que contenga los elementos de b con vecindarios
#    con al menos 700 personas (se podría cambiar pero dejemos 700).
#    DESCOMENTAR LA SIGUIENTE LINEA DE CÓDIGO
#c<- b[b$neighborhood %in%  names(table(b$neighborhood))[table(b$neighborhood) >= 700],]
# 2. Vuelva a graficar el número de elementos por vecindario
# 1. Crear una tabla c que contenga los elementos de b con vecindarios
#    con al menos 700 personas (se podría cambiar pero dejemos 700).
c<- b[b$neighborhood %in%  names(table(b$neighborhood))[table(b$neighborhood) >= 700],]
#Volvamos a graficar el diagrama de dispersión
pl<-ggplot(data=c,aes(y=price,x=neighborhood))
pl+geom_boxplot(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1))
# One Hot Encoding
# 1. Columnas de Neighborhood
vecindarios<-model.matrix(~neighborhood-1,b)
# 2. Columnas de Room_type
tipos_cuarto<-model.matrix(~room_type-1,b)
# 3. Uniendo tablas
b <- cbind(b, vecindarios,tipos_cuarto)
#length(colnames(b))
colnames(b)[40:45]
# Please ENTER the percentage of data used for estimation
porcion_train = 0.9
porcion_test = 0.1
# Librería dplyr
library(dplyr)
# Creando índice con función "mutate"" de dplyr
# Esto lo utilizaremos solo como referencia
b <- mutate(b,id = row_number())
# 1. Conjunto de entrenamiento
# Creando datos de entrenamiento con función "sample_frac" de dplyr
# La función toma una muestra aleatoria de tamaño "porcion_train" de "b"
train_set <- sample_frac(b,porcion_train)
# 2. Conjunto de evaluación
# Creando datos de evaluación con función "anti_join" de dplyr
# La función extraen los datos de "b" que no coinciden con "train_set"
# usando como referencia la columna "id"
test_set <- anti_join(b, train_set, by = 'id')
# Creando modelo de ejemplo
model_1<- lm(formula = overall_satisfaction ~ room_type + neighborhood +
reviews,
data = train_set)
# Sacando predicciones
pred_train_1=predict(model_1,train_set)#entrenamiento
pred_test_1=predict(model_1,test_set)#evaluación
# Reportando modelo: usted solo necesita poner "summary(model)"
# Eso le entrega los resultados del modelo pero se imprime en formato feo
# Nosotros lo vamos a imprimir como una "xtable" en "knitr::kable"
library(xtable)
knitr::kable(xtable(summary(model_1)))
knitr::opts_chunk$set(echo = TRUE)
# 1. Chequear donde está el directorio: getwd()
# 2. Leer el archivo tomslee_airbnb_amsterdam: read.csv()
#    Guardarlo con el nombre b
# 3. Esto es solo para cambiar el formato: se guarda el Data.Frame b
#    en la variable a como una matriz
#    DESCOMENTAR SIGUIENTE LÍNEA
#a<-data.matrix(b)
# 4. Imprimiento las primeras 3 filas:
#    t significa transponer,
#    head(a,3) significa primeras 3 filas de a
#    round(a,2) significa redondear los valores a 2 decimales
#    DESCOMENTAR SIGUIENTES LÍNEAS
#knitr::kable({
#  df <- t(head(round(a,2), 5))
#  colnames(df) <- sprintf("%02d", 1:ncol(df))
#  df
#})
# Chequear donde está el directorio
getwd()
# Leer el archivo tomslee_airbnb_amsterdam
b<-read.csv("./data/tomslee_airbnb_amsterdam_1476_2017-07-22.csv")
#Voy a hacer una copia como una matriz solo para imprimir
#No es necesario hacer esto cuando se trabaja en R, esto solo es
#Porque tenemos un archivo markdown y los data frames se imprimen feo
a<-data.matrix(b)
#Imprimiento las primeras 3 filas: t significa transponer,
#head(a,3) significa primeras 3 filas de a
#round(a,2) significa redondear los valores a 2 decimales
knitr::kable({
df <- t(head(round(a,2), 5))
#df <- t(head(b, 2))
colnames(df) <- sprintf("%02d", 1:ncol(df))
df
})
# 1. Utilice la función "summary" con el dataset "b"
summary(b)
# 1. Elimine las variables que tienen valores NA
#   Simplemente se asigna NULL a la variable que se desea eliminar:
#b$var1 <- NULL
b$country <- NULL
b$borough <- NULL
b$bathrooms <- NULL
b$minstay <- NULL
colnames(b)
# 1. Llame la librería ggplot2
# 2. Cree un objeto con la función ggplot()
#    este debe recibie el DATAFRAME b y la VARIABLE price
#pl <- ggplot(DATAFRAME, aes(x=VARIABLE_A_EXPLORAR))
# 3. Grafique el histograma
#    DESCOMENTAR LA SIGUIENTE LINEA
#pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
library(ggplot2)
pl <- ggplot(b,aes(x=price))
pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
# 1. Filtre los valores mayores o iguales a percentil 1
#    La función quantile(DATO$VAR, p) sirve para determinar
#    el percentil p, de la variable VAR en el dataframe DATOS.
#    DESCOMENTAR LA SIGUIENTE LINEA
#b<- b [b$price>=quantile(b$price,0.01),]
# 2. Filtre los valores menores o iguales a percentil 99
# 3. Grafique nuevamente el histograma de la variable price.
#filtrando data frame entre percentiles 1 y 99 de la variable precio
b<- b [(b$price>=quantile(b$price,0.01)) & (b$price <= quantile(b$price,0.99)),]
#Graficando nuevamente
pl <- ggplot(b,aes(x=price))
pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
# Para no hacernos la vida imposible podemos hacer muchos scatter plot
# utilizando la función visualize de la librería radiant.data
# 1. Llamar la librería radiant.data (instalarla en caso lo necesite)
# 2. Utilizar la función visualize para ver los diagramas de dispersión.
#    COMPLETE EL SIGUIENTE BLOQUE DE CÓDIGO
#visualize(dataset= NOMBRE DEL DATAFRAME,
#          xvar=c("VARIABLES INDEPENDIENTES""),
#          yvar="VARIABLE DEPENDIENTE",
#          type="scatter",
#          custom=FALSE
#)
#fig.height=4.5,
#Para no hacernos la vida imposible podemos hacer muchos scatter plot
#utilizando la función visualize de la librería radiant.data
#library(lubridate)
# INSTALAR RADIANT DATA
library(radiant.data)
visualize(dataset=b,
xvar=c("reviews","overall_satisfaction","accommodates","bedrooms",
"latitude", "longitude"),
yvar="price",
type="scatter",
custom=FALSE
)
pl<-ggplot(data=b,aes(y=price,x=neighborhood))
pl+geom_boxplot(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1))
# 1. Defina el límite inferior de los vecindarios a considerar
#    como un 4% del total de datos en nuestra base (nrow)
#    COMPLETE LA SIGUIENTE LINEA DE CODIGO
#lim_inferior<- #...
# 2. Vamos a graficar el número de elementos por vecindario
#    DESCOMENTE EL BLOQUE DE CODIGO
#pl<-ggplot(data=b,aes(x=neighborhood))
#pl+geom_bar(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1)) +geom_hline(yintercept = lim_inferior)
# límite inferior de los vecindarios a considerar
# Podemos agarrar 1%-2%-3%-4%-5% de elementos
lim_inferior<-nrow(b)*0.04
#conteo_vec
pl<-ggplot(data=b,aes(x=neighborhood))
pl+geom_bar(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1)) +geom_hline(yintercept = lim_inferior)
# 1. Crear una tabla c que contenga los elementos de b con vecindarios
#    con al menos 700 personas (se podría cambiar pero dejemos 700).
#    DESCOMENTAR LA SIGUIENTE LINEA DE CÓDIGO
#c<- b[b$neighborhood %in%  names(table(b$neighborhood))[table(b$neighborhood) >= 700],]
# 2. Vuelva a graficar el número de elementos por vecindario
# 1. Crear una tabla c que contenga los elementos de b con vecindarios
#    con al menos 700 personas (se podría cambiar pero dejemos 700).
c<- b[b$neighborhood %in%  names(table(b$neighborhood))[table(b$neighborhood) >= 700],]
#Volvamos a graficar el diagrama de dispersión
pl<-ggplot(data=c,aes(y=price,x=neighborhood))
pl+geom_boxplot(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1))
# One Hot Encoding
# 1. Columnas de Neighborhood
vecindarios<-model.matrix(~neighborhood-1,b)
# 2. Columnas de Room_type
tipos_cuarto<-model.matrix(~room_type-1,b)
# 3. Uniendo tablas
b <- cbind(b, vecindarios,tipos_cuarto)
#length(colnames(b))
colnames(b)[40:45]
# 1. Vamos a dividir en datos de entrenamiento 90%, datos de evaluación 10%
porcion_train = 0.9
porcion_test = 0.1
# Importando librería dplyr
library(dplyr)
# Creando índice con función "mutate"" de dplyr
# Esto lo utilizaremos solo como referencia
b <- mutate(b,id = row_number())
# 2. Conjunto de entrenamiento
# Creando datos de entrenamiento con función "sample_frac" de dplyr
# La función toma una muestra aleatoria de tamaño "porcion_train" de "b"
train_set <- sample_frac(b,porcion_train)
# 3. Conjunto de evaluación
# Creando datos de evaluación con función "anti_join" de dplyr
# La función extraen los datos de "b" que no coinciden con "train_set"
# usando como referencia la columna "id"
test_set <- anti_join(b, train_set, by = 'id')
# 1. Complete el modelo con variables independientes room_type,
#   neighborhood, reviews, overall_satisfaction, accommodates, bedrooms
model_1<- lm(formula = overall_satisfaction ~ room_type + neighborhood +
reviews,
data = train_set)
# 2. Sacando predicciones para los datos de evaluación
pred_train_1=predict(model_1,train_set)#entrenamiento
pred_test_1=predict(model_1,test_set)#evaluación
# 3. Reportando modelo en formato apropiado: la función "summary(model)"
#    entrega los resultados del modelo pero se imprime en formato feo
#    Nosotros lo vamos a imprimir como una "xtable" en "knitr::kable"
#    DESCOMENTE EL SIGUIENTE BLOQUE DE CODIGO
#library(xtable)
#knitr::kable(xtable(summary(model_1)))
knitr::opts_chunk$set(echo = TRUE)
# 1. Chequear donde está el directorio: getwd()
# 2. Leer el archivo tomslee_airbnb_amsterdam: read.csv()
#    Guardarlo con el nombre b
# 3. Esto es solo para cambiar el formato: se guarda el Data.Frame b
#    en la variable a como una matriz
#    DESCOMENTAR SIGUIENTE LÍNEA
#a<-data.matrix(b)
# 4. Imprimiento las primeras 3 filas:
#    t significa transponer,
#    head(a,3) significa primeras 3 filas de a
#    round(a,2) significa redondear los valores a 2 decimales
#    DESCOMENTAR SIGUIENTES LÍNEAS
#knitr::kable({
#  df <- t(head(round(a,2), 5))
#  colnames(df) <- sprintf("%02d", 1:ncol(df))
#  df
#})
# Chequear donde está el directorio
getwd()
# Leer el archivo tomslee_airbnb_amsterdam
b<-read.csv("./data/tomslee_airbnb_amsterdam_1476_2017-07-22.csv")
#Voy a hacer una copia como una matriz solo para imprimir
#No es necesario hacer esto cuando se trabaja en R, esto solo es
#Porque tenemos un archivo markdown y los data frames se imprimen feo
a<-data.matrix(b)
#Imprimiento las primeras 3 filas: t significa transponer,
#head(a,3) significa primeras 3 filas de a
#round(a,2) significa redondear los valores a 2 decimales
knitr::kable({
df <- t(head(round(a,2), 5))
#df <- t(head(b, 2))
colnames(df) <- sprintf("%02d", 1:ncol(df))
df
})
# 1. Utilice la función "summary" con el dataset "b"
summary(b)
# 1. Elimine las variables que tienen valores NA
#   Simplemente se asigna NULL a la variable que se desea eliminar:
#b$var1 <- NULL
b$country <- NULL
b$borough <- NULL
b$bathrooms <- NULL
b$minstay <- NULL
colnames(b)
# 1. Llame la librería ggplot2
# 2. Cree un objeto con la función ggplot()
#    este debe recibie el DATAFRAME b y la VARIABLE price
#pl <- ggplot(DATAFRAME, aes(x=VARIABLE_A_EXPLORAR))
# 3. Grafique el histograma
#    DESCOMENTAR LA SIGUIENTE LINEA
#pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
library(ggplot2)
pl <- ggplot(b,aes(x=price))
pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
# 1. Filtre los valores mayores o iguales a percentil 1
#    La función quantile(DATO$VAR, p) sirve para determinar
#    el percentil p, de la variable VAR en el dataframe DATOS.
#    DESCOMENTAR LA SIGUIENTE LINEA
#b<- b [b$price>=quantile(b$price,0.01),]
# 2. Filtre los valores menores o iguales a percentil 99
# 3. Grafique nuevamente el histograma de la variable price.
#filtrando data frame entre percentiles 1 y 99 de la variable precio
b<- b [(b$price>=quantile(b$price,0.01)) & (b$price <= quantile(b$price,0.99)),]
#Graficando nuevamente
pl <- ggplot(b,aes(x=price))
pl+geom_histogram(fill='blue',alpha=0.5)+theme_minimal()
# Para no hacernos la vida imposible podemos hacer muchos scatter plot
# utilizando la función visualize de la librería radiant.data
# 1. Llamar la librería radiant.data (instalarla en caso lo necesite)
# 2. Utilizar la función visualize para ver los diagramas de dispersión.
#    COMPLETE EL SIGUIENTE BLOQUE DE CÓDIGO
#visualize(dataset= NOMBRE DEL DATAFRAME,
#          xvar=c("VARIABLES INDEPENDIENTES""),
#          yvar="VARIABLE DEPENDIENTE",
#          type="scatter",
#          custom=FALSE
#)
#fig.height=4.5,
#Para no hacernos la vida imposible podemos hacer muchos scatter plot
#utilizando la función visualize de la librería radiant.data
#library(lubridate)
# INSTALAR RADIANT DATA
library(radiant.data)
visualize(dataset=b,
xvar=c("reviews","overall_satisfaction","accommodates","bedrooms",
"latitude", "longitude"),
yvar="price",
type="scatter",
custom=FALSE
)
pl<-ggplot(data=b,aes(y=price,x=neighborhood))
pl+geom_boxplot(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1))
# 1. Defina el límite inferior de los vecindarios a considerar
#    como un 4% del total de datos en nuestra base (nrow)
#    COMPLETE LA SIGUIENTE LINEA DE CODIGO
#lim_inferior<- #...
# 2. Vamos a graficar el número de elementos por vecindario
#    DESCOMENTE EL BLOQUE DE CODIGO
#pl<-ggplot(data=b,aes(x=neighborhood))
#pl+geom_bar(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1)) +geom_hline(yintercept = lim_inferior)
# límite inferior de los vecindarios a considerar
# Podemos agarrar 1%-2%-3%-4%-5% de elementos
lim_inferior<-nrow(b)*0.04
#conteo_vec
pl<-ggplot(data=b,aes(x=neighborhood))
pl+geom_bar(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1)) +geom_hline(yintercept = lim_inferior)
# 1. Crear una tabla c que contenga los elementos de b con vecindarios
#    con al menos 700 personas (se podría cambiar pero dejemos 700).
#    DESCOMENTAR LA SIGUIENTE LINEA DE CÓDIGO
#c<- b[b$neighborhood %in%  names(table(b$neighborhood))[table(b$neighborhood) >= 700],]
# 2. Vuelva a graficar el número de elementos por vecindario
# 1. Crear una tabla c que contenga los elementos de b con vecindarios
#    con al menos 700 personas (se podría cambiar pero dejemos 700).
c<- b[b$neighborhood %in%  names(table(b$neighborhood))[table(b$neighborhood) >= 700],]
#Volvamos a graficar el diagrama de dispersión
pl<-ggplot(data=c,aes(y=price,x=neighborhood))
pl+geom_boxplot(fill='blue',alpha=0.5)+theme_minimal()+theme(axis.text.x=element_text(angle=90, hjust=1))
# One Hot Encoding
# 1. Columnas de Neighborhood
vecindarios<-model.matrix(~neighborhood-1,b)
# 2. Columnas de Room_type
tipos_cuarto<-model.matrix(~room_type-1,b)
# 3. Uniendo tablas
b <- cbind(b, vecindarios,tipos_cuarto)
#length(colnames(b))
colnames(b)[40:45]
# 1. Vamos a dividir en datos de entrenamiento 90%, datos de evaluación 10%
porcion_train = 0.9
porcion_test = 0.1
# Importando librería dplyr
library(dplyr)
# Creando índice con función "mutate"" de dplyr
# Esto lo utilizaremos solo como referencia
b <- mutate(b,id = row_number())
# 2. Conjunto de entrenamiento
# Creando datos de entrenamiento con función "sample_frac" de dplyr
# La función toma una muestra aleatoria de tamaño "porcion_train" de "b"
train_set <- sample_frac(b,porcion_train)
# 3. Conjunto de evaluación
# Creando datos de evaluación con función "anti_join" de dplyr
# La función extraen los datos de "b" que no coinciden con "train_set"
# usando como referencia la columna "id"
test_set <- anti_join(b, train_set, by = 'id')
# 1. Complete el modelo con variables independientes room_type,
#   neighborhood, reviews, overall_satisfaction, accommodates, bedrooms
model_1<- lm(formula = overall_satisfaction ~ room_type + neighborhood +
reviews,
data = train_set)
# 2. Sacando predicciones para los datos de evaluación
pred_train_1=predict(model_1,train_set)#entrenamiento
pred_test_1=predict(model_1,test_set)#evaluación
# 3. Reportando modelo en formato apropiado: la función "summary(model)"
#    entrega los resultados del modelo pero se imprime en formato feo
#    Nosotros lo vamos a imprimir como una "xtable" en "knitr::kable"
#    DESCOMENTE EL SIGUIENTE BLOQUE DE CODIGO
library(xtable)
knitr::kable(xtable(summary(model_1)))
# Creando modelo
model_1<- lm(formula = price ~ room_type + neighborhood +
reviews +overall_satisfaction + accommodates +
bedrooms,data = train_set)
# Sacando predicciones
pred_train_1=predict(model_1,train_set)#entrenamiento
pred_test_1=predict(model_1,test_set)#evaluación
# Reportando modelo: usted solo necesita poner "summary(model)"
# Eso le entrega los resultados del modelo pero se imprime en formato feo
# Nosotros lo vamos a imprimir como una "xtable" en "knitr::kable"
library(xtable)
knitr::kable(xtable(summary(model_1)))
# Creando modelo
model_2<-lm(formula = log(price) ~ room_type + neighborhood +
reviews +overall_satisfaction + log(accommodates) +
bedrooms,data = train_set)
# Sacando predicciones
pred_train_2=exp(predict(model_2,train_set))
pred_test_2=exp(predict(model_2,test_set))
# Reportando modelo
knitr::kable(xtable(summary(model_2)))
library(rpart)
model_3 <- rpart(price ~ room_type + neighborhood +
reviews +overall_satisfaction + accommodates +
bedrooms,data = train_set, method="anova")
# Sacando predicciones
pred_train_3=predict(model_3,train_set)#entrenamiento
pred_test_3=predict(model_3,test_set)#evaluación
# 1. Complete el modelo con variables independientes room_type,
#   neighborhood, reviews, overall_satisfaction, accommodates, bedrooms
#   y variable dependiente price.
model_1<- lm(formula = overall_satisfaction ~ room_type + neighborhood +
reviews,
data = train_set)
# 2. Sacando predicciones para los datos de evaluación
pred_train_1=predict(model_1,train_set)#entrenamiento
pred_test_1=predict(model_1,test_set)#evaluación
# 3. Reportando modelo en formato apropiado: la función "summary(model)"
#    entrega los resultados del modelo pero se imprime en formato feo
#    Nosotros lo vamos a imprimir como una "xtable" en "knitr::kable"
#    DESCOMENTE EL SIGUIENTE BLOQUE DE CODIGO
library(xtable)
knitr::kable(xtable(summary(model_1)))
