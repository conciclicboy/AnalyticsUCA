}))
frame3 <- data.frame(
`log reg % selected` = res[1,],
`log reg est. profit` = res[2,],
check.names = FALSE
)
plot3 <- ggplot(frame3, aes(x=`log reg % selected`, y=`log reg est. profit`)) + geom_line()
# we can plot the curves individually
# grid.arrange(plot1, plot2, plot3)   # use `fig.height=7.5` for the grid plot
# But we're going to combine them instead
df.all <- do.call(rbind, lapply(list(frame1, frame2, frame3), function(df) {
df <- melt(df, id=1)
df$variable <- sub(" est. profit", "", df$variable)
colnames(df)[1] <- "% of validation data selected"
df
}))
ggplot(df.all, aes(x=`% of validation data selected`, y=value, colour=variable)) + geom_line() + ylab("Estimated profit")
######for train data#####
test_actual=test_data[,dependent_variable]
test_predictions = rbind(test_prediction_class_log,
test_prediction_class_tree,
test_prediction_class_tree_large
)
test_hit_rates = rbind(
100*sum(test_prediction_class_log==test_actual)/length(test_actual),
100*sum(test_prediction_class_tree==test_actual)/length(test_actual),
100*sum(test_prediction_class_tree_large==test_actual)/length(test_actual)
)
colnames(test_hit_rates) <- "Hit Ratio"
rownames(test_hit_rates) <- c("Logistic Regression","First CART", "Second CART")
knitr::kable(test_hit_rates)
test_prediction_best = test_predictions[which.max(test_hit_rates),]
conf_matrix = matrix(rep(0,4),ncol=2)
conf_matrix[1,1]<- 100*sum(test_prediction_best*test_data[,dependent_variable])/sum(test_data[,dependent_variable])
conf_matrix[1,2]<- 100*sum((!test_prediction_best)*test_data[,dependent_variable])/sum(test_data[,dependent_variable])
conf_matrix[2,1]<- 100*sum((test_prediction_best)*(!test_data[,dependent_variable]))/sum((!test_data[,dependent_variable]))
conf_matrix[2,2]<- 100*sum((!test_prediction_best)*(!test_data[,dependent_variable]))/sum((!test_data[,dependent_variable]))
conf_matrix = round(conf_matrix,2)
colnames(conf_matrix) <- c(paste("Predicted 1 (", class_1_interpretation, ")", sep = ""), paste("Predicted 0 (", class_0_interpretation, ")", sep = ""))
rownames(conf_matrix) <- c(paste("Actual 1 (", class_1_interpretation, ")", sep = ""), paste("Actual 0 (", class_0_interpretation, ")", sep = ""))
knitr::kable(conf_matrix)
test_actual_class <- as.numeric(test_data[,dependent_variable])
pred_tree_test <- prediction(test_Probability_class1_tree, test_actual_class)
pred_tree_large_test <- prediction(test_Probability_class1_tree_large, test_actual_class)
pred_log_test <- prediction(test_Probability_class1_log, test_actual_class)
test<-performance(pred_tree_test, "tpr", "fpr")
df1<- cbind(as.data.frame(test@x.values),as.data.frame(test@y.values))
colnames(df1) <- c("False Positive rate CART 1", "True Positive CART 1")
test2<-performance(pred_tree_large_test, "tpr", "fpr")
df2<- cbind(as.data.frame(test2@x.values),as.data.frame(test2@y.values))
colnames(df2) <- c("False Positive rate CART 2", "True Positive CART 2")
test3<-performance(pred_log_test, "tpr", "fpr")
df3<- cbind(as.data.frame(test3@x.values),as.data.frame(test3@y.values))
colnames(df3) <- c("False Positive rate log reg", "True Positive log reg")
df.all <- do.call(rbind, lapply(list(df1, df2, df3), function(df) {
df <- melt(df, id=1)
df$variable <- sub("True Positive ", "", df$variable)
colnames(df)[1] <- "False Positive rate"
df
}))
ggplot(df.all, aes(x=`False Positive rate`, y=value, colour=variable)) + geom_line() + ylab("True Positive rate") + geom_abline(intercept = 0, slope = 1,linetype="dotted",colour="green")
test_actual <- test_data[,dependent_variable]
all1s <- sum(test_actual)
probs <- test_Probability_class1_tree
xaxis <- sort(unique(c(0,1,probs)), decreasing = TRUE)
res <- 100*Reduce(cbind,lapply(xaxis, function(prob){
useonly <- which(probs >= prob)
c(length(useonly)/length(test_actual), sum(test_actual[useonly])/all1s)
}))
frame1 <- data.frame(
`CART 1 % of validation data` = res[1,],
`CART 1 % of class 1` = res[2,],
check.names = FALSE
)
probs <- test_Probability_class1_tree_large
xaxis <- sort(unique(c(0,1,probs)), decreasing = TRUE)
res <- 100*Reduce(cbind,lapply(xaxis, function(prob){
useonly <- which(probs >= prob)
c(length(useonly)/length(test_actual), sum(test_actual[useonly])/all1s)
}))
frame2 <- data.frame(
`CART 2 % of validation data` = res[1,],
`CART 2 % of class 1` = res[2,],
check.names = FALSE
)
probs <- test_Probability_class1_log
xaxis <- sort(unique(c(0,1,probs)), decreasing = TRUE)
res <- 100*Reduce(cbind,lapply(xaxis, function(prob){
useonly <- which(probs >= prob)
c(length(useonly)/length(test_actual), sum(test_actual[useonly])/all1s)
}))
frame3 <- data.frame(
`log reg % of validation data` = res[1,],
`log reg % of class 1` = res[2,],
check.names = FALSE
)
df.all <- do.call(rbind, lapply(list(frame1, frame2, frame3), function(df) {
df <- melt(df, id=1)
df$variable <- sub(" % of class 1", "", df$variable)
colnames(df)[1] <- "% of test data selected"
df
}))
ggplot(df.all, aes(x=`% of test data selected`, y=value, colour=variable)) + geom_line() + ylab("% of class 1 captured") + geom_abline(intercept = 0, slope = 1,linetype="dotted",colour="green")
actual_class<- test_data[,dependent_variable]
probs <- test_Probability_class1_tree
xaxis <- sort(unique(c(0,1,probs)), decreasing = TRUE)
res <- Reduce(cbind,lapply(xaxis, function(prob){
useonly <- which(probs >= prob)
predict_class <- 1*(probs >= prob)
theprofit <- Profit_Matrix[1,1]*sum(actual_class==1 & predict_class==1)+
Profit_Matrix[1,2]*sum(actual_class==1 & predict_class==0)+
Profit_Matrix[2,1]*sum(actual_class==0 & predict_class==1)+
Profit_Matrix[2,2]*sum(actual_class==0 & predict_class==0)
c(100*length(useonly)/length(actual_class), theprofit)
}))
frame1 <- data.frame(
`CART 1 % selected` = res[1,],
`CART 1 est. profit` = res[2,],
check.names = FALSE
)
probs <- test_Probability_class1_tree_large
xaxis <- sort(unique(c(0,1,probs)), decreasing = TRUE)
res <- Reduce(cbind,lapply(xaxis, function(prob){
useonly <- which(probs >= prob)
predict_class <- 1*(probs >= prob)
theprofit <- Profit_Matrix[1,1]*sum(actual_class==1 & predict_class==1)+
Profit_Matrix[1,2]*sum(actual_class==1 & predict_class==0)+
Profit_Matrix[2,1]*sum(actual_class==0 & predict_class==1)+
Profit_Matrix[2,2]*sum(actual_class==0 & predict_class==0)
c(100*length(useonly)/length(actual_class), theprofit)
}))
frame2 <- data.frame(
`CART 2 % selected` = res[1,],
`CART 2 est. profit` = res[2,],
check.names = FALSE
)
probs <- test_Probability_class1_log
xaxis <- sort(unique(c(0,1,probs)), decreasing = TRUE)
res <- Reduce(cbind,lapply(xaxis, function(prob){
useonly <- which(probs >= prob)
predict_class <- 1*(probs >= prob)
theprofit <- Profit_Matrix[1,1]*sum(actual_class==1 & predict_class==1)+
Profit_Matrix[1,2]*sum(actual_class==1 & predict_class==0)+
Profit_Matrix[2,1]*sum(actual_class==0 & predict_class==1)+
Profit_Matrix[2,2]*sum(actual_class==0 & predict_class==0)
c(100*length(useonly)/length(actual_class), theprofit)
}))
frame3 <- data.frame(
`log reg % selected` = res[1,],
`log reg est. profit` = res[2,],
check.names = FALSE
)
df.all <- do.call(rbind, lapply(list(frame1, frame2, frame3), function(df) {
df <- melt(df, id=1)
df$variable <- sub(" est. profit", "", df$variable)
colnames(df)[1] <- "% of test data selected"
df
}))
ggplot(df.all, aes(x=`% of test data selected`, y=value, colour=variable)) + geom_line() + ylab("Estimated profit")
rmarkdown::render()
rmarkdown::render(input = "Deafult_Tarjeta_Credito.Rmd")
getwd()
rmarkdown::render(input = "./Sesiones/Sesiones_5_6Clasificacion/Deafult_Tarjeta_Credito.Rmd")
rmarkdown::render(input = "../Sesiones/Sesiones_5_6Clasificacion/Deafult_Tarjeta_Credito.Rmd")
getwd()
rmarkdown::render("../Sesiones/Sesiones_5_6Clasificacion/Deafult_Tarjeta_Credito.Rmd")
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/Sesiones_5_6Clasificacion")
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/Sesiones_5_6Clasificacion/")
rmarkdown::render("../Sesiones/Sesiones_5_6_Clasificacion/Deafult_Tarjeta_Credito.Rmd")
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/Sesiones_5_6_Clasificacion/")
rmarkdown::render("Deafult_Tarjeta_Credito.Rmd")
getwd()
rmarkdown::render("Deafult_Tarjeta_Credito.Rmd")
rmarkdown::render(Deafult_Tarjeta_Credito.Rmd)
rmarkdown::render('Deafult_Tarjeta_Credito.Rmd')
rmarkdown::render("../Deafult_Tarjeta_Credito.Rmd")
rmarkdown::render("./Deafult_Tarjeta_Credito.Rmd")
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics")
rmarkdown::render("../Sesiones/Sesiones_5_6_Clasificacion/Deafault_Tarjeta_Credito.Rmd")
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/Sesiones_5_6_Clasificacion/")
rmarkdown::render("Deafault_Tarjeta_Credito.Rmd")
list.files()
rmarkdown::render("Default_Tarjeta_Credito.Rmd")
getwd()
knit("Default_Tarjeta_Credito.Rmd")
knit2html("Default_Tarjeta_Credito.Rmd")
version
getOption(“rstudio.markdownToHTML”)
getOption()
make_pdf_file = 0 # Haga este número 1 si quiere un archivo PDF, 0 para HTML
source("../../AnalyticsLibraries/library.R")
getOption(“rstudio.markdownToHTML”)
getOption("rstudio.markdownToHTML")
getwd()
class_percentages=matrix(c(sum(estimation_data[,dependent_variable]==1),
sum(estimation_data[,dependent_variable]==0)),
nrow=1)
########################   NO TOCAR    #############################
make_pdf_file = 0 # DEJE 0 SI PARA PRODUCIR UN ARCHIVO HTML, 1 PARA UN PDF
local_directory = "."
source(paste(local_directory,"../../AnalyticsLibraries/library.R", sep="/"))
source(paste(local_directory,"../../AnalyticsLibraries/heatmapOutput.R", sep = "/"))
# Package options
ggthemr('fresh')  # ggplot theme
opts_knit$set(progress=FALSE, verbose=FALSE)
opts_chunk$set(echo=FALSE, fig.align="center", fig.width=10, fig.height=6.2)
options(knitr.kable.NA = '')
dformat <-function(df) {
if (class(df) != "data.frame")
df <- as.data.frame(df)
x <- lapply(colnames(df), function(col) {
if (is.numeric(df[, col]))
normalize_bar(rgb(238, 238, 238, max=255), min=0.1, na.rm=TRUE)
else
formatter("span")
})
names(x) <- colnames(df)
formattable(df, x)
}
if (make_pdf_file) {
dformat<- function(df) knitr::kable(df)
}
# SET UP
# When running the case on a local computer, modify this in case you saved the case in a different directory
# (e.g. local_directory <- "C:/user/MyDocuments" )
# type in the Console below help(getwd) and help(setwd) for more information
#local_directory <- paste(getwd(),"CourseSessions/Sessions67", sep="/")
#local_directory <- "~INSEADAnalytics/CourseSessions/Sessions67"
# Please ENTER the filename that indicates subsets of the data to use (e.g. only a specific cluster)
# This file need to have 2 columns with the second one indicating the cluster ID of the observation.
# The rows of this files are aligned with those of the datafile_name one
# This is used ONLY for the report "MyBoatsDrivers"
cluster_file_ini = "Boats_cluster" # make sure this file exists in the "data" directory
datafile_name = "Boats"
# Please ENTER the class (dependent) variable:
# Please use numbers, not column names! e.g. 82 uses the 82nd column are dependent variable.
# YOU NEED TO MAKE SURE THAT THE DEPENDENT VARIABLES TAKES ONLY 2 VALUES: 0 and 1!!!
dependent_variable= 82
# Please ENTER the attributes to use as independent variables
# Please use numbers, not column names! e.g. c(1:5, 7, 8) uses columns 1,2,3,4,5,7,8
independent_variables= c(54:80) # use 54-80 for boats
# Please ENTER the profit/cost values for the correctly and wrong classified data:
actual_1_predict_1 = 100
actual_1_predict_0 = -75
actual_0_predict_1 = -50
actual_0_predict_0 = 0
# Please ENTER the probability threshold above which an observations
# is predicted as class 1:
Probability_Threshold=50 # between 1 and 99%
# Please ENTER the percentage of data used for estimation
estimation_data_percent = 80
validation_data_percent = 10
# Please enter 0 if you want to "randomly" split the data in estimation and validation/test
random_sampling = 0
# Tree parameter
# PLEASE ENTER THE Tree (CART) complexity control cp (e.g. 0.001 to 0.02, depending on the data)
CART_cp = 0.01
# Please enter the minimum size of a segment for the analysis to be done only for that segment
min_segment = 100
# Please enter the maximum number of observations to show in the report and slides
# (DEFAULT is 50. If the number is large the report and slides may not be generated - very slow or will crash!!)
max_data_report = 10 # can also chance in server.R
Probability_Threshold = Probability_Threshold/100 # make it between 0 and 1
ProjectData <- read.csv(paste(paste(local_directory, "data", sep="/"), paste(datafile_name,"csv", sep="."), sep = "/")) # this contains only the matrix ProjectData
ProjectData=data.matrix(ProjectData)
# if (datafile_name == "Boats")
#   colnames(ProjectData)<-gsub("\\."," ",colnames(ProjectData))
dependent_variable = unique(sapply(dependent_variable,function(i) min(ncol(ProjectData), max(i,1))))
independent_variables = unique(sapply(independent_variables,function(i) min(ncol(ProjectData), max(i,1))))
if (length(unique(ProjectData[,dependent_variable])) !=2){
cat("\n*****\n BE CAREFUL, THE DEPENDENT VARIABLE TAKES MORE THAN 2 VALUES...")
cat("\nSplitting it around its median...\n*****\n ")
new_dependent = ProjectData[,dependent_variable] >= median(ProjectData[,dependent_variable])
ProjectData[,dependent_variable] <- 1*new_dependent
}
Profit_Matrix = matrix(c(actual_1_predict_1, actual_0_predict_1, actual_1_predict_0, actual_0_predict_0), ncol=2)
colnames(Profit_Matrix)<- c("Predict 1", "Predict 0")
rownames(Profit_Matrix) <- c("Actual 1", "Actual 0")
test_data_percent = 100-estimation_data_percent-validation_data_percent
CART_control = rpart.control(cp = CART_cp)
rmarkdown::render("Deafult_Tarjeta_Credito.Rmd")
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/Sesiones_5_6_Clasificacion/")
rmarkdown::render("Deafult_Tarjeta_Credito.Rmd")
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/Sesiones_5_6_Clasificacion/")
libraries_used=c("devtools","knitr","graphics","grDevices","xtable","pryr",
"Hmisc")
remove.packages(pkgs = libraries_used)
1+1
3*5+12
knitr::opts_chunk$set(echo = TRUE)
1+1
a <-  5
b<- 31
c <- a*b-100
c
1+1
a <-  5
b<- 31
c <- a*b-100
c
rmarkdown::render("Intro_basica.Rmd")
getwd()
paste(getwd(),"Sesiones")
paste(getwd(),"/Sesiones/Sesiones_1_2_Intro_R")
paste(getwd(),"/Sesiones/Sesiones_1_2_Intro_R", "")
paste(getwd(),"/Sesiones/Sesiones_1_2_Intro_R",sep = "")
setwd(paste(getwd(),"/Sesiones/Sesiones_1_2_Intro_R",sep = ""))
getwd()
rmarkdown::render("Intro_basica.Rmd")
rmarkdown::render("Intro_basica.Rmd")
rmarkdown::render("Intro_basica.Rmd")
![""](images/FileTypes.png)
![""](images/New R Markdown.png)
# Esto es un comentario
1+2
![""](images/RScript_Run.png)
345*20 -76
getwd()
# Este comando muestra el directorio donde nos encontramos:
#getwd()
# Este comando muestra el directorio donde nos encontramos:
getwd()
# Este comando puede cambiar la ubicación del directorio si es necesario:
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/")
root.dir
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/")
1+1
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/")
# Este comando puede cambiar la ubicación del directorio si es necesario:
1+1
setwd("C:/Users/eduardo_canas/Documents/R/UCAanalytics/Sesiones/")
getwd()
# OBTENGA LA DIRECCIÓN ACTUAL
source("library.R")
#setwd("PONGA AQUÍ LA UBICACIÓN")
#Llame la librería
#source("library.R")
# Cambie la parte donde dice r eval = FALSE por TRUE para poder ver los cambios en el documento HTML
#ncol(ProjectData)
#colnames(ProjectData)
#colnames(ProjectData)[1:10]
#rownames(ProjectData) #ejecute esta línea bajo su propio riesgo pues tiene 2813 observaciones
library("quantmod", lib.loc="~/R/win-library/3.5")
detach("package:quantmod", unload=TRUE)
library("quantreg", lib.loc="~/R/win-library/3.5")
detach("package:quantreg", unload=TRUE)
library("quantmod", lib.loc="~/R/win-library/3.5")
library("quantreg", lib.loc="~/R/win-library/3.5")
detach("package:quantreg", unload=TRUE)
detach("package:quantmod", unload=TRUE)
library("quantmod", lib.loc="~/R/win-library/3.5")
# Instale quantmod antes de ejecutar las siguientes líneas de código
#if (require(LIBRERIA)==FALSE){install.packages("NOMBRE DE LA LIBRERIA")}
#Librería
library(quantmod)
#Obteniendo una tabla de precios del stock de Apple con precios de yahoo finance
getSymbols("AAPL",src="yahoo")
#Utilice la función "plot()" para graficar los precios
plot(AAPL$AAPL.Open)
View(AAPL)
View(AAPL)
# Cambie la parte donde dice r eval = FALSE por TRUE para poder ver los cambios en el documento HTML
# Número de filas en el archivo
ncol(ProjectData)
# Nombres de columnas
colnames(ProjectData)
# Nombres de las primeras 10 columans
colnames(ProjectData)[1:10]
#ejecute esta línea bajo su propio riesgo pues tiene 2813 observaciones
#rownames(ProjectData)
print(colnames(ProjectData)[2])
#mean(ProjectData[,2])
#sd(ProjectData[,2])
#range(ProjectData[,2])
#min(ProjectData[,2])
#max(ProjectData[,2])
#quantile(ProjectData[,2],0.1)
#quantile(ProjectData[,2],0.5)
#quantile(ProjectData[,2],0.9)
#summary(ProjectData[,2])
print(colnames(ProjectData)[3])
#mean(ProjectData[,2])
#sd(ProjectData[,2])
#range(ProjectData[,2])
#min(ProjectData[,2])
#max(ProjectData[,2])
#quantile(ProjectData[,2],0.1)
#quantile(ProjectData[,2],0.5)
#quantile(ProjectData[,2],0.9)
#summary(ProjectData[,2])
print(colnames(ProjectData)[10])
#mean(ProjectData[,2])
#sd(ProjectData[,2])
#range(ProjectData[,2])
#min(ProjectData[,2])
#max(ProjectData[,2])
#quantile(ProjectData[,2],0.1)
#quantile(ProjectData[,2],0.5)
#quantile(ProjectData[,2],0.9)
#summary(ProjectData[,2])
print(colnames(ProjectData)[2])
#mean(ProjectData[,2])
#sd(ProjectData[,2])
#range(ProjectData[,2])
#min(ProjectData[,2])
#max(ProjectData[,2])
#quantile(ProjectData[,2],0.1)
#quantile(ProjectData[,2],0.5)
#quantile(ProjectData[,2],0.9)
#summary(ProjectData[,2])
# Nombre de la columna
print(colnames(ProjectData)[2])
# Promedio
#mean(ProjectData[,2])
# Desviación estándar
#sd(ProjectData[,2])
# Rango
#range(ProjectData[,2])
# Valor mínimo
#min(ProjectData[,2])
# Valor máximo
#max(ProjectData[,2])
# Percentil 10
#quantile(ProjectData[,2],0.1)
# Percentil 50 (mediana)
#quantile(ProjectData[,2],0.5)
# Percentil 90
#quantile(ProjectData[,2],0.9)
# Resumen
summary(ProjectData[,2])
#hist(ProjectData[,2], main = "Columna número 2", xlab = "Ratings", ylab = "Encuestados")
hist(ProjectData$Q1.1)
knitr::opts_chunk$set(echo = TRUE)
#obteniendo directorio
getwd()
b<-read.csv("./data/tomslee_airbnb_amsterdam_1476_2017-07-22.csv")
### Omitir este código
#leyendo todos los archivos en ese directorio
#archivos <- list.files(path="data")
#for (file in archivos){
#  a<-read.csv(paste0("./data/",file))
#b<-rbind(b,a)
#}
###
#Voy a hacer una copia como una matriz solo para imprimirl
#No es necesario hacer esto cuando se trabaja en R, esto solo es
#Porque tenemos un archivo markdown y los data frames se imprimen feo
a<-data.matrix(b)
#Imprimiento las primeras 3 filas: t significa transponer,
#head(a,3) significa primeras 3 filas de a
#round(a,2) significa redondear los valores a 2 decimales
knitr::kable({
#df <- t(head(round(a,2), 5))
df <- t(head(b, 2))
colnames(df) <- sprintf("%02d", 1:ncol(df))
df
})
########################   NO TOCAR    #############################
make_pdf_file = 0 # DEJE 0 SI PARA PRODUCIR UN ARCHIVO HTML, 1 PARA UN PDF
local_directory = "."
source(paste(local_directory,"../../AnalyticsLibraries/library.R", sep="/"))
########################   NO TOCAR    #############################
make_pdf_file = 0 # DEJE 0 SI PARA PRODUCIR UN ARCHIVO HTML, 1 PARA UN PDF
local_directory = "."
source(paste(local_directory,"../../AnalyticsLibraries/library.R", sep="/"))
# installs all necessary libraries from CRAN or Github
get_libraries <- function(filenames_list) suppressPackageStartupMessages({
lapply(filenames_list, function(thelibrary){
thelibrary.split <- strsplit(thelibrary, "/")[[1]]
if (length(thelibrary.split) > 1) {
# install from Github
if (!suppressWarnings(require(thelibrary.split[2], character.only=TRUE))) {
devtools::install_github(thelibrary, quiet=TRUE)
library(thelibrary.split[2], character.only=TRUE)
}
} else {
# install from CRAN
if (!suppressWarnings(require(thelibrary, character.only=TRUE))) {
install.packages(thelibrary, repos="http://cran.r-project.org/", quiet=TRUE)
library(thelibrary, character.only=TRUE)
}
}
})
})
libraries_used=c("devtools","knitr","graphics","grDevices","xtable","pryr",
"Hmisc","vegan","fpc","GPArotation","FactoMineR","cluster",
"psych","stringr","googleVis", "png","ggplot2","googleVis",
"gridExtra", "reshape2", "DT",
"shiny",
"ramnathv/slidify", "cttobin/ggthemr", "dplyr",
"vkapartzianis/formattable", "ggdendro","ROCR",
"networkD3","rpart.plot","mrjoh3/c3","glmnet",
"hong-revo/glmnetUtils","randomForest","xgboost")
get_libraries(libraries_used)
version(R)
version
get_libraries(libraries_used)
libraries_used=c("devtools","knitr","graphics","grDevices","xtable","pryr",
"Hmisc","vegan","fpc","GPArotation","FactoMineR","cluster",
"psych","stringr","googleVis", "png","ggplot2","googleVis",
"gridExtra", "reshape2", "DT",
"shiny",
"ramnathv/slidify", "cttobin/ggthemr", "dplyr",
"vkapartzianis/formattable", "ggdendro","ROCR",
"networkD3","rpart.plot","mrjoh3/c3",
#"glmnet",
"hong-revo/glmnetUtils","randomForest","xgboost")
get_libraries(libraries_used)
update()
updateR()
install.packages(glmnet)
install.packages("glmnet")
