print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 3,
eta = 0.7, nthread = 2, nrounds = 10, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.3, nthread = 2, nrounds = 20, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.3, nthread = 2, nrounds = 20, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 3,
eta = 0.3, nthread = 2, nrounds = 20, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.3, nthread = 2, nrounds = 20, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.5, nthread = 2, nrounds = 8, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.5, nthread = 2, nrounds = 10, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.5, nthread = 2, nrounds = 10, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"US_House_Price_Inflation")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"US_House_Price_Inflation")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.5, nthread = 2, nrounds = 10, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"US_House_Price_Inflation")]
X_test<- test_set[,c("Time","Year", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"US_House_Price_Inflation")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.5, nthread = 2, nrounds = 10, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
colnames(X_train)
colnames(X_test)
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"US_House_Price_Inflation")]
X_test<- test_set[,c("Time", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"US_House_Price_Inflation")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.5, nthread = 2, nrounds = 10, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
library(xgboost)
# Primero vamos a definir las matrices de entrenamiento y evaluación
X_train<- train_set[,c("Time","Year", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_test<- test_set[,c("Time", "Q1","Q2","Q3",
"CPI_New_Cars", "Cons_Conf_Autos","Miles_Driven",
"US_Population_millions","Unemployment",
"Disposible_Income_Capita_Real",
"Household_Debt_Capital",
"US_House_Price_Inflation",
"Consumer_Confidence","RealGDP","Fed_Funds_Rate",
"Nonfarm_Payrolls")]
X_train<- train_set[,c("Time", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"US_House_Price_Inflation")]
X_test<- test_set[,c("Time", "Q1","Q2","Q3",
"US_Population_millions",
"Disposible_Income_Capita_Real",
"US_House_Price_Inflation")]
# Luego definimos los vectores de la variable dependiente
y_train<- train_set$Truck
y_test<-test_set$Truck
# Modelo
model_5 <- xgboost(data = as.matrix(X_train), label = as.matrix(y_train), max.depth = 2,
eta = 0.5, nthread = 2, nrounds = 20, objective = "reg:linear",
eval_metric="rmse",verbose = 1)
# Predicciones
pred_train_5<-predict(model_5,as.matrix(X_train))
pred_test_5<-predict(model_5,as.matrix(X_test))
#Mean Absolute Error
mae_train5<-mae(y_train,pred_train_5)
mae5<-mae(y_test,pred_test_5)
# reportando errores
print(paste("train set: ",mae_train5))
print(paste("test set: ",mae5))
